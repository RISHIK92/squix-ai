#!/usr/bin/env node
import * as fs from "fs";
import * as path from "path";
import * as readline from "node:readline/promises";
import { stdin as input, stdout as output } from "node:process";

const PRISMA_SCHEMA_TEMPLATE = (
  provider: "postgresql" | "mysql"
) => `// This schema was generated by the Squix AI init command.
// It's the minimum required to connect to your database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "${provider}"
  url      = env("DATABASE_URL")
}
`;

const ENV_APPEND_TEMPLATE = `
# Variables added by Squix AI
# ---------------------------
# Your Google Gemini API Key
GEMINI_API_KEY="YOUR_GEMINI_API_KEY_HERE"

# Your Database Connection URL
DATABASE_URL=""
`;

/**
 * Reads a prisma.schema file and tries to determine the database provider.
 * @param schemaPath Path to the schema.prisma file.
 * @returns 'postgresql', 'mysql', or null if not found.
 */
function detectProviderFromSchema(
  schemaPath: string
): "postgresql" | "mysql" | null {
  try {
    const content = fs.readFileSync(schemaPath, "utf-8");
    const match = content.match(/provider\s*=\s*"(postgresql|mysql)"/);
    if (match && (match[1] === "postgresql" || match[1] === "mysql")) {
      return match[1];
    }
    return null;
  } catch {
    return null;
  }
}

async function main() {
  console.log("Welcome to Squix AI! Let's check your project setup.");

  const rl = readline.createInterface({ input, output });

  const prismaDir = path.join(process.cwd(), "prisma");
  const schemaPath = path.join(prismaDir, "schema.prisma");
  const envPath = path.join(process.cwd(), ".env");

  const schemaExists = fs.existsSync(schemaPath);
  const envExists = fs.existsSync(envPath);

  let provider: "postgresql" | "mysql" | null = null;
  let didCreateSchema = false;

  if (schemaExists) {
    console.log("✅ Found existing `prisma/schema.prisma`.");
    provider = detectProviderFromSchema(schemaPath);
    if (provider) {
      console.log(`   -> Detected database provider: ${provider}`);
    } else {
      console.log(
        "⚠️  Could not automatically detect the database provider from your schema."
      );
    }
  } else {
    console.log("-> No `prisma/schema.prisma` found. Let's create one.");
    const dbTypeAnswer = await rl.question(
      "Which database are you using? (1) PostgreSQL (2) MySQL: "
    );
    provider = dbTypeAnswer.trim() === "2" ? "mysql" : "postgresql";

    if (!fs.existsSync(prismaDir)) {
      fs.mkdirSync(prismaDir);
    }
    fs.writeFileSync(schemaPath, PRISMA_SCHEMA_TEMPLATE(provider));
    console.log(`✅ Created 'prisma/schema.prisma' for ${provider}.`);
    didCreateSchema = true;
  }

  if (envExists) {
    console.log("✅ Found existing `.env` file.");
    const envContent = fs.readFileSync(envPath, "utf-8");

    const variablesToAppend: string[] = [];
    if (!envContent.match(/^GEMINI_API_KEY=/m)) {
      variablesToAppend.push('GEMINI_API_KEY="YOUR_GEMINI_API_KEY_HERE"');
    }
    if (!envContent.match(/^DATABASE_URL=/m)) {
      variablesToAppend.push('DATABASE_URL=""');
    }

    if (variablesToAppend.length > 0) {
      const appendContent = `\n\n# Variables required by Squix AI\n${variablesToAppend.join(
        "\n"
      )}\n`;
      fs.appendFileSync(envPath, appendContent);
      console.log(
        "   -> Appended missing Squix AI variables to your `.env` file."
      );
    } else {
      console.log(
        "   -> Your `.env` file already contains the required variables."
      );
    }
  } else {
    if (!provider) {
      const dbTypeAnswer = await rl.question(
        "Which database are you setting up for your .env? (1) PostgreSQL (2) MySQL: "
      );
      provider = dbTypeAnswer.trim() === "2" ? "mysql" : "postgresql";
    }
    console.log("-> No `.env` file found. Creating one for you.");
    fs.writeFileSync(envPath, ENV_APPEND_TEMPLATE.trim());
    console.log("✅ Created `.env` file with placeholder variables.");
  }

  console.log("\n🎉 Squix AI setup is complete!");
  console.log("\nNext steps:");
  console.log(
    "1. Open your `.env` file and ensure `GEMINI_API_KEY` and `DATABASE_URL` are set correctly."
  );
  if (didCreateSchema) {
    console.log(
      "2. Run `npx prisma generate` to prepare the database client for your project."
    );
  } else {
    console.log(
      "2. Ensure you have already run `npx prisma generate` for your existing schema."
    );
  }
  console.log("3. You are now ready to use Squix AI in your code!");

  rl.close();
}

main().catch((error) => {
  console.error("\nAn unexpected error occurred during setup:", error);
  process.exit(1);
});
